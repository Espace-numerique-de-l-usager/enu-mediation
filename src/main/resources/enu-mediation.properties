app.document.mime-types = application/pdf
app.formservices.url = ${FORMSERVICES_BASEURL}/rest
app.formservices.ssl.trust-store.resource = classpath:security/gina.20191003.jks
app.formservices.ssl.trust-store.password = ${SSL_TRUSTSTORE_PASS}
app.logging.max-file-content-size = 100
app.prestation.simetier = {"permisPeche": "simetier2", "changementAdresse": "simetier2", "delaiSuccession": "simetier2", "declarationImpots": "simetier3"}

spring.rabbitmq.host = ${RABBITMQ_HOST}
spring.rabbitmq.port = 5672
spring.rabbitmq.username = ${RABBITMQ_USER}
spring.rabbitmq.password = ${RABBITMQ_PASS}
spring.rabbitmq.virtual-host = aelenu
spring.rabbitmq.listener.direct.acknowledge-mode = auto
spring.rabbitmq.ssl.enabled = true
spring.rabbitmq.ssl.trust-store = classpath:security/gina.20191003.jks
spring.rabbitmq.ssl.trust-store-password = ${SSL_TRUSTSTORE_PASS}
spring.rabbitmq.ssl.verify-hostname = false

spring.http.log-request-details=true

app.file.name.sanitization-regex = "[^a-zA-Z0-9âàçéèêôùÂÀÉÈ\\.]"

# queue ou on lit les messages des SI metier
app.rabbitmq.main.queue = all-to-enu-main-q

# echange ou on ecrit les messages de reponse aux SI metier
app.rabbitmq.reply.exchange = enu-to-all-reply

# echange ou on ecrit les messages en erreur technique
app.rabbitmq.dlq.exchange = enu-dlq
app.rabbitmq.dlq.routing-key = enu-dlq-q

# flux inverse : queue ou on lit les messages de enu-backend
app.rabbitmq.backend-to-mediation.queue = backend-to-mediation-q

# flux inverse : echange ou on ecrit en passe-plat les messages venus de enu-backend
app.rabbitmq.inverse.exchange = enu-to-all-main

logging.level.root = INFO
logging.level.org.apache.camel = INFO
logging.level.org.springframework = ERROR
logging.level.org.springframework.web.reactive.function.client.ExchangeFunctions=TRACE

